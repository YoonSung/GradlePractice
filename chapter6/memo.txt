-----------------------------------------------------
To try this out, create the following build script named build.gradle.

Example 6.1. Your first build script build.gradle
	task hello {
     		doLast {
          		println 'Hello world!'
     		}
	}

move to containing directory and execute build script with >grade -q hello

etc.
Most of the examples in this user guide are run with the -q command-line option. This suppresses Gradle's log messages, so that only the output of the tasks is shown. This keeps the example output in this user guide a little clearer. 


-----------------------------------------------------
Example 6.3. A task definition shortcut
There is a shorthand way to define a task like our hello task above, which is more concise.

task hello << {
    println 'Hello world!'
}


-----------------------------------------------------
Example 6.4. Using Groovy in Gradle's tasks

task upper << {
    String someString = 'mY_nAmE'
    println "Original: " + someString 
    println "Upper case: " + someString.toUpperCase()
}

-----------------------------------------------------
Example 6.5. Using Groovy in Gradle's tasks

task count << {
    4.times { print "$it " }
}


-----------------------------------------------------
Example 6.6. Declaration of task that depends on other task

task hello << {
    println 'Hello world!'
}
task intro(dependsOn: hello) << {
    println "I'm Gradle"
}


-----------------------------------------------------
Example 6.8. Dynamic creation of a task

4.times { counter ->
    task "task$counter" << {
        println "I'm task number $counter"
    }
}

gradle -q task1


-----------------------------------------------------
Example 6.9. Accessing a task via API - adding a dependency

4.times { counter ->
    task "task$counter" << {
        println "I'm task number $counter"
    }
}
task0.dependsOn task2, task3


-----------------------------------------------------
Example 6.10. Accessing a task via API - adding behaviour

task hello << {
    println 'Hello Earth'
}
hello.doFirst {
    println 'Hello Venus'
}
hello.doLast {
    println 'Hello Mars'
}
hello << {
    println 'Hello Jupiter'
}

> gradle -q hello
Hello Venus
Hello Earth
Hello Mars
Hello Jupiter

perator is simply an alias for doLast.


-----------------------------------------------------
Example 6.12. Adding extra properties to a task

task myTask {
    ext.myProperty = "myValue"
}

task printTaskProperties << {
    println myTask.myProperty
}


-----------------------------------------------------
Example 6.15. Defining a default tasks

sks 'clean', 'run'

task clean << {
    println 'Default Cleaning!'
}

task run << {
    println 'Default Running!'
}

task other << {
    println "I'm not a default task!"
}

> gradle -q
Default Cleaning!
Default Running!


-----------------------------------------------------
-----------------------------------------------------
-----------------------------------------------------
