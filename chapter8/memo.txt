https://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html

-------------------------------------------
8.1. What is dependency management?

- Very roughly, dependency management is made up of two pieces. 
- Firstly, Gradle needs to know about the things that your project needs to build or run, in order to find them. We call these incoming files the dependencies of the project.    

- Secondly, Gradle needs to build and upload the things that your project produces. We call these outgoing files the publications of the project. 

- dependency resolution.
:incoming files form the dependencies of the project. Gradle allows you to tell it what the dependencies of your project are, so that it can take care of finding these dependencies, and making them available in your build.  
   
- publication
:You might want to copy the files to a local directory, or upload them to a remote Maven or Ivy repository. Or you might use the files in another project in the same multi-project build. We call this process publication.


-------------------------------------------
8.2. Declaring your dependencies

Example 8.2. Definition of an external dependency
build.gradle
apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

What's going on here? This build script says a few things about the project. Firstly, it states that Hibernate core 3.6.7.Final is required to compile the project's production source. By implication, Hibernate core and its dependencies are also required at runtime. The build script also states that any junit >= 4.0 is required to compile the project's tests. It also tells Gradle to look in the Maven central repository for any dependencies that are required. The following sections go into the details.

compile
The dependencies required to compile the production source of the project.

runtime
The dependencies required by the production classes at runtime. By default, also includes the compile time dependencies.

testCompile
The dependencies required to compile the test source of the project. By default, also includes the compiled production classes and the compile time dependencies.

testRuntime
The dependencies required to run the tests. By default, also includes the compile, runtime and test compile dependencies.


-------------------------------------------
8.5. Repositories

- How does Gradle find the files for external dependencies? Gradle looks for them in a repository. A repository is really just a collection of files, organized by group, name and version. Gradle understands several different repository formats, such as Maven and Ivy, and several different ways of accessing the repository, such as using the local file system or HTTP.

- By default, Gradle does not define any repositories. You need to define at least one before you can use external dependencies. One option is use the Maven central repository:


- Example 8.4. Usage of Maven central repository
build.gradle
repositories {
    mavenCentral()
}

Or a remote Maven repository:


- Example 8.5. Usage of a remote Maven repository

build.gradle
repositories {
    maven {
        url "http://repo.mycompany.com/maven2"
    }
}

Or a remote Ivy repository:


- Example 8.6. Usage of a remote Ivy directory

build.gradle
repositories {
    ivy {
        url "http://repo.mycompany.com/repo"
    }
}


You can also have repositories on the local file system. This works for both Maven and Ivy repositories.

Example 8.7. Usage of a local Ivy directory

build.gradle
repositories {
    ivy {
        // URL can refer to a local directory
        url "../local-repo"
    }
}

-------------------------------------------
